                     +--------------------------+
                     |         EE 461S          |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alexis Torres alexistorres@utexas.edu
Javier Padilla javierpadilla@utexas.edu
Guadalupe Melendez guadalupe.melendez@austin.utexas.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


threads/thread.c
[+] struct thread *find_thread_by_tid(tid_t ftid);
- Searchs for a thread given a tid and will return a struct thread
[+] struct kernel_thread_frame();
- Stack frame for Kenerel_thread()
[+] int find_next_table_pos(struct thread *cur);
- Max of 128, so this will find the next avaiable position for *cur.
[+] int add_to_table(struct thread *cur, struct file *new_file);
- Will add whatever file onto the thread.
[+] void removed_from_table(int fd, struct thread *cur);
- from the file file descriptor table will insert a null in that position
[+] bool removed_from_table_by_filename(struct thread *cur, struct file *file);
- from the actual filename will insert a null in that position
[+] int search_by_file(struct thread *cur, struct file *target_file);
- returns either the actual location if file found and if not found then return -1;
[+] void thread_schedule_tail(struct thread *prev)
- After this funcrion and its caller returns then the thread will switch

threads/thread.h
[+] struct thread
 struct list all_process_list;
 char *executing_file;
- 

[+] struct semaphore exiting_thread;
-
[+] struct semaphore reading_exit_status;
[+] int exit_code;
[+] struct file *file_descriptor_table[MAX_FD]; 
[+] int fdt_index;
[+] int how_many_fd;
[+] struct list mis_ninos;
[+] struct list_elem chld_thrd_elm;
[+] bool has_been_waited_on;
[+] bool is_thread(struct thread *t);
[+] struct thread *find_thread_by_tid(tid_t tid);
[+] int add_to_table(struct thread *cur, struct file *new_file);
[+] void removed_from_table(int fd, struct thread *cur);
[+] bool removed_from_table_by_filename(struct thread *cur, struct file *file);
[+] int search_by_file(struct thread *cur, struct file *target_file);

userprog/process.c
[+] bool exec_file_open;
[+] tid_t process_execute(const char *file_name)
 char *file_name_cpy, *sav_ptr;
 exec_file_open = false;
[+] struct thread *cur = thread_current();
[+] struct thread *thread;
[+] struct list_elem *elm_in_list = list_begin(&cur->all_process_list);
[+] bool is_my_child(tid_t child_tid);
[+] struct thread *child_thread;
[+] struct list_elem *child_in_list = list_begin(&cur->mis_ninos);
[+] list_entry(child_in_list, struct thread, chld_thrd_elm);
[+] int process_wait(tid_t child_tid UNUSED) 
 struct thread *thread_waited_on = find_thread_by_tid(child_tid);
[+] char *sav_ptr, *token;
[+] char *args[24];
[+] int counter = 0;
[+] sav_ptr = file_name;
[+] uint32_t *arg_val_ptr[argc];
[+] uint32_t byte_count = 0;
[+] byte_count = byte_count + sizeof(char) * (strlen(argv[i]) + 1);

userprog/syscall.h
[+] static int get_user(const uint8_t *uaddr);
[+] static bool put_user(uint8_t *udst, uint8_t byte);
[+] void close_thread_files();
[+] bool valid_ptr(uint8_t *addy, uint8_t byte, int size, uint8_t type_of_call);
[+] bool valid_ptr_v2(const void *addy);
[+] bool check_buffer(void *buff_to_check, unsigned size);
[+] static struct lock file_lock; 
[+] void matelo(struct thread *cur);





 userprog/syscall.c
[+] 
[+] 
[+] 
    


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

    We allocate a new page, then copy file_name into the new page.
    Next we create a hard copy of the file_name parameter into file_name_cpy
    Then, we use strtok_r() to get the file name (which is the first element of the input param)
    Next, we create a new thread to execute FILE_NAME, add it to the parent list (mis_ninos), and eventually start the process. 
    In start_process, we call the load function which is where the rest of the argument parsing begins. 
    In load we use strtok_r to save the first argument.
    Then we go into a while loop in which the condition is such that if strtok_r() returns NULL, so that it can tokenize 
    the rest of the input param and put them into our args array.

>> How do you avoid overflowing the stack page?
    We limit the arguments to those that will fit in a single page. 
    We also malloc when neccessary and are planning on freeing any unused data, such as when a remove is being called



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
    strtok_r() is thread safe while strtok is not(). (its a dafety precaution we take)



                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct lock file_lock;   /* Lock for synchronization on file related operations */

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
If a file has been opened by a thread, then the file will be added to the thread's file descriptor table. 
If an opened file gets removed, then the file will be removed from the file descriptor table and it's index will be set to null. 
File descripters are unique just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

SYS_READ:
We start by validating the argument pointers. If the pointers are not valid, then it kills the process with exit code -1 by calling matalo(). 
Then, we set the fd to the first arg, *buffer to second arg, and the size to the third arg.
Next we check that the buffer contains valid pointers to the data for the indicated size (arg1). If it does not, the function returns. 
Then we check that fd table (ensures it is not reading from STDOUT and is less than the MAX_FD). If it is, then we kill the process with exit code -1 be calling matalo().
If the fd is equal to STDIN, then it returns the input from the keyboard. 
Once we finish the validations, we set 'file' to the specified fd from from the current threads' file_descriptor_table.
If the file is NULL, we exit. If not, we acquire the file lock, run process_execute, then release the lock. We set the frames eax to the return value. 

SYS_WRITE
We validate the pointers and buffers and set the fd, *buffer, and size variables to arg0, arg1, and arg2, respectively.
Next we check that we are not reading from STDIN and the fd is less than MAX_FD - if they are, it exits the current thread and sets the return exit value to 0. 
Then we check if we are writing to the console (STDOUT). If we are, we use the file lock, run putbuf to write to the console, release the lock, then set the frame's return value to size.
Finally, in the case that it passes all validation and is not writing to the console, we set the 'targeta' file variable to the specified fd from the current thread's file_descriptor_table
We then use this to verify that targeta is not NULL, acquire the file_lock, open the current executing file and load it into the '*exec_file' file pointer, and release the file_lock
Then we check if the file is trying to write to the executable file; if it is, we close the file and exit. 
Otherwise, we acquire/release the lock while we close the exec_file. If the targeta's deny_write is false, then we run file_write on targeta from 'buffer' of 'size'.
Once this finishes, we release the lock. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
Assuming that the data is all on the same page (contigious memory), there will only be one inspection of the page table that is 
necessary (this would be the least amount). On the hand, if they are not in contigous memory, there can be up to 4096 inspections. 
Similarly, if they a call is only copying 2 bytes of data, there could be one inspection if they are in contigious memory but possibly (and up to) two if they are not. 
A way to improve these numbers is to cache recent translations to decrease the number of inspections. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
We start by setting the *thread_waited_on pointer to the child thread that's being waited on. We find the child thread by calling the find_thread_by_tid and passing in the child's tid.
Next, we verify thread_waited_on exists and is a child of the current thread (i.e., the thread calling wait). If it is not, return -1
Next we verify that the thread_waited_on has not been waited on before.
If it has not, we set the flag that it has now been waited on, and call sema_down on the exiting_thread semaphore. This is to wait on process_exit() of the thread_waited_on side.
Next we obtain the exit_code of the thread_waited_on, and sema_up to notify that the thread has been read. 
Then terminate and free resources, and return exit code. 
Else, the function returns -1. 


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
Our best approach at avoiding obscurity of the primary function amid all the 
error handling was to create an organized and systematic structure. We 
did as much pointer validation as possible at the top of our syscall_handler function before 
going into the separate switch cases. 

Aditionally, we used a switch case because we felt it helped the code to be more organized 
and highlighted what the primary function was. Within each of the switch cases, we did our 
best to systematically verify our components so that there was a common theme amongst the 
cases which made it easier to identify what code was there for error handling. 
We also did all error handling at the top and tried to used our 'else' statement for the execution 
of the primary function. 

We also used functions to break out the verification process and make it less overwhelming within the 
switch cases.  In the case that error was detected, we would call out matalo() (which means kill in spanish) function which would
exit the thread with exit_code -1 and free the threads resources. 

For example, in the case SYS_WRITE we start by calling our first pointer validtion function and our check buffer function.
After this, we load the necessary arguments into our variables, and verify these variables in our second validtion function. 
If there are any errors, we call the matalo() function (which exits the thread with -1 and frees the thread's resources).
Next we check for any niche cases, in this case, if the file descriptor is STDOUT and execute the putbuf function to write to the console. 
Finally, in our else bracket, we execute the general case (i.e., the primary function).
Since this requires additional error handling, we handle those first. We check if the file returned by the specified fd in the file_descriptor table returns NULL. 
if it does, it exits with matalo() and returns.
If it does not, we load the exec_file then finish executing the rest of the primary function. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

It does not. We tried using a lock around the execution of the child to ensure that it would return, 
but it doesn't work. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

There's one handshake from two semaphores. 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Because the standford doc/ reciatation said it was easier of the two operations.
It is more straightforward logically to get the test out of the way to begin with.


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Disadvantages:

There exist many duplicate file descriptor structs, for stdin and stdout - 
each thread contains structs for these fds. Worst case: acessing a file descriptor 
is O(n), where n is the number of file descriptors for the current thread and we 
obviously would need to run through the entire fd list. Best case it could be 
O(1) if they were stored in an array.

Advantages: 
Because each thread has a list of its file descriptors, there is no limit on 
the number of open file descriptors (until we run out of memory). Whether we use 
pipe or open our file descriptors are created, the same structure can store the 
necessary information, and be used in essentially the same way.




>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Did we change these??? Weset things as the default.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
