                     +--------------------------+
                     |         EE 461S          |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alexis Torres alexistorres@utexas.edu
Javier Padilla javierpadilla@utexas.edu
Guadalupe Melendez guadalupe.melendez@austin.utexas.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* In thread.c */
#define MAX_FD 128 /*Maximum number of file descriptors allowed per table*/

struct thread
{
    /* Owned by thread.c. */
    tid_t tid;                    /* Thread identifier. */
    enum thread_status status;    /* Thread state. */
    char name[16];                /* Name (for debugging purposes). */
    uint8_t *stack;               /* Saved stack pointer. */
    int priority;                 /* Priority. */
    struct list_elem allelem;     /* List element for all threads list. */
    struct list all_process_list; /* So that the thread can access all other threads*/
    char *executing_file;
    /* Shared between thread.c and synch.c. */
    struct list_elem elem;        /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir; /* Page directory. */

    struct semaphore exiting_thread;      /* For when the thread is exiting*/
    struct semaphore reading_exit_status; /* To make sure the parent can read the exit status of the child*/

    int exit_code;                        /* Holds the exit status for the thread*/

    struct file *file_descriptor_table[MAX_FD];     /* Holds File Descriptors per process*/
    int fdt_index;                                  /* File descriptor table index */
    int how_many_fd;                                /* Is the index to the next file descriptor */
    struct list mis_ninos;                          /* List holds the threads children */
    struct list_elem chld_thrd_elm;                 /* * Not sure.  */
    bool has_been_waited_on;                        /* Simple flag to check if a child was waited on or not*/

#endif

    /* Owned by thread.c. */
    unsigned magic; /* Detects stack overflow. */
};



/* In process.c */
bool exec_file_open;            /* Variable that holds if exec file is open. */


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

    We allocate a new page, then copy file_name into the new page.
    Next we create a hard copy of the file_name parameter into file_name_cpy
    Then, we use strtok_r() to get the file name (which is the first element of the input param)
    Next, we create a new thread to execute FILE_NAME, add it to the parent list (mis_ninos), and eventually start the process. 
    In start_process, we call the load function which is where the rest of the argument parsing begins. 
    In load we use strtok_r to save the first argument.
    Then we go into a while loop in which the condition is such that if strtok_r() returns NULL, so that it can tokenize 
    the rest of the input param and put them into our args array.

>> How do you avoid overflowing the stack page?
    We limit the arguments to those that will fit in a single page. 



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
    strtok_r() is thread safe while strtok is not(). 

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct lock file_lock;   /* Lock for synchronization on file related operations */

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

SYS_READ:
We start by validating the argument pointers. If the pointers are not valid, the function returns. 
Then, we set the fd to the first arg, *buffer to second arg, and the size to the third arg.
Next we check that the buffer contains valid pointers to data for the indicated size (arg1).
Then we check that fd table (ensures it is not reading from STDOUT and is less than the MAX_FD)
Once we finish the validations, we set 'file' to the specified fd from from the current threads' file_descriptor_table
If the file is NULL, we exit. If not, we acquire the file lock, set the file_write for the fdt to deny, run process_execute, the release the lock. We set the frames eax to the return value. 

SYS_WRITE
We validate the pointers and buffers and set the fd, *buffer, and size variables to args0, arg1, and arg2, respectively.
Next we check that we are not reading from STDIN and the fd is less than MAX_FD - if they are, it exits the current thread and sets the return value to -1. 
Then we check that if we are writing to the console (STDOUT). If we are, we use the file lock, run putbuf to write to the console, release the lock, then set the frames return value to size.
Finally, in the case that it passes all validation and is not writing to the console, we set the 'targeta' file variable to the specified fd from the current thread's file_descriptor_table
We then use this to verify that targeta is not equal to NULL, acquire the file_lock, open the current executing file and load it into the '*exec_file' file pointer, and release the file_lock
Then we check if the file is trying to write to the executable file; if it is, we close the file and exit. 
Otherwise, we acquire/release the lock while we close the exec_file. Then we acquire the file lock and re-enable targeta's write operation. If the targeta's deny_write is false, then we run file_write on targeta from 'buffer' of 'size'.
We then disable file_write to targeta, and release the lock. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
