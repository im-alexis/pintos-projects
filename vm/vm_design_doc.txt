                     +---------------------------+
                     |         EE 461S           |
                     | PROJECT 3: VIRTUAL MEMORY |
                     |      DESIGN DOCUMENT      |
                     +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Javier Padilla javierpadilla@utexas.edu
Alexis Torress alexistorres@utexas.edu
Guadalupe Melendez guadalupe.melendez@austin.utexas.edu

FirstName LastName <email@utexas.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Extra credit? Yes! Please! We need all of it we can get on this
Some of the most helpful items we used outside of the Pintos documentation/
Standford documentation was:
https://www.youtube.com/watch?v=hKA3wJtyDo4&list=PLD3EwQVkinwQxHd3HMUxbK-HP_Tp-Wuqn
https://www.youtube.com/@ee415intro.tooperatingsyst8
As a group we wactched a majority of the videos to help reenforce everyhting we are 
trying to learn



                   SUPPLEMENTAL PAGE TABLE MANAGEMENT
                   ==================================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

threads/thread.c
[+] struct thread *find_thread_by_tid(tid_t ftid);
- Searchs for a thread given a tid and will return a struct thread
[+] struct kernel_thread_frame();
- Stack frame for Kenerel_thread()
[+] int find_next_table_pos(struct thread *cur);
- Max of 128, so this will find the next avaiable position for *cur.
[+] int add_to_table(struct thread *cur, struct file *new_file);
- Will add whatever file onto the thread.
[+] void removed_from_table(int fd, struct thread *cur);
- from the file file descriptor table will insert a null in that position
[+] bool removed_from_table_by_filename(struct thread *cur, struct file *file);
- from the actual filename will insert a null in that position
[+] int search_by_file(struct thread *cur, struct file *target_file);
- returns either the actual location if file found and if not found then return -1;
[+] void thread_schedule_tail(struct thread *prev)
- After this funcrion and its caller returns then the thread will switch

threads/thread.h
[+] struct thread
 struct list all_process_list;
 char *executing_file;
- 

[+] struct semaphore exiting_thread;
-
[+] struct semaphore reading_exit_status;
[+] int exit_code;
[+] struct file *file_descriptor_table[MAX_FD]; 
[+] int fdt_index;
[+] int how_many_fd;
[+] struct list mis_ninos;
[+] struct list_elem chld_thrd_elm;
[+] bool has_been_waited_on;
[+] bool is_thread(struct thread *t);
[+] struct thread *find_thread_by_tid(tid_t tid);
[+] int add_to_table(struct thread *cur, struct file *new_file);
[+] void removed_from_table(int fd, struct thread *cur);
[+] bool removed_from_table_by_filename(struct thread *cur, struct file *file);
[+] int search_by_file(struct thread *cur, struct file *target_file);

userprog/process.c
[+] bool exec_file_open;
[+] tid_t process_execute(const char *file_name)
 char *file_name_cpy, *sav_ptr;
 exec_file_open = false;
[+] struct thread *cur = thread_current();
[+] struct thread *thread;
[+] struct list_elem *elm_in_list = list_begin(&cur->all_process_list);
[+] bool is_my_child(tid_t child_tid);
[+] struct thread *cur = thread_current();
[+] struct thread *child_thread;
[+] struct list_elem *child_in_list = list_begin(&cur->mis_ninos);
[+] list_entry(child_in_list, struct thread, chld_thrd_elm);
[+] int process_wait(tid_t child_tid UNUSED) 
 struct thread *thread_waited_on = find_thread_by_tid(child_tid);
[+] char *sav_ptr, *token;
[+] char *args[24];
[+] int counter = 0;
[+] sav_ptr = file_name;
[+] uint32_t *arg_val_ptr[argc];
[+] uint32_t byte_count = 0;
[+] byte_count = byte_count + sizeof(char) * (strlen(argv[i]) + 1);

userprog/syscall.h
[+] static int get_user(const uint8_t *uaddr);
[+] static bool put_user(uint8_t *udst, uint8_t byte);
[+] void close_thread_files();
[+] void matelo();
[+] bool valid_ptr(uint8_t *addy, uint8_t byte, int size, uint8_t type_of_call);
[+] bool valid_ptr_v2(const void *addy);
[+] bool check_buffer(void *buff_to_check, unsigned size);
[+] static struct lock file_lock; 
[+] static int get_user(const uint8_t *uaddr);
[+] void matelo(struct thread *cur);
[+] bool valid_ptr(uint8_t *addy, uint8_t byte, int size, uint8_t type_of_call);
[+] bool valid_ptr_v2(const void *addy);





 userprog/syscall.c
[+] 
[+] 
[+] 
    






---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

---- SYNCHRONIZATION ----

>> A3: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A4: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

                        PAGING TO AND FROM DISK
                        =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
